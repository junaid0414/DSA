SUBSTRING OF SIZE THREE WITH DISTINCT CHARACTERS

A string is good if there are no repeated characters.

Given a string s​​​​​, return the number of good substrings of length three in s​​​​​​.

Note that if there are multiple occurrences of the same substring, every occurrence should be counted.

A substring is a contiguous sequence of characters in a string.

Example 1:

Input: s = "xyzzaz"
Output: 1
Explanation: There are 4 substrings of size 3: "xyz", "yzz", "zza", and "zaz". 
The only good substring of length 3 is "xyz".
Example 2:

Input: s = "aababcabc"
Output: 4
Explanation: There are 7 substrings of size 3: "aab", "aba", "bab", "abc", "bca", "cab", and "abc".
The good substrings are "abc", "bca", "cab", and "abc".
 
Constraints:
1 <= s.length <= 100
s​​​​​​ consists of lowercase English letters.

brute force:
import java.util.*;
class missingnumber_array{
    public static void main(String[] args) {
        Scanner Sc=new Scanner(System.in);
        System.out.println("Enter the size: ");
        String s=Sc.nextLine();
        int n=s.length();
        int l=3;
        boolean is=true;
        int count=0;
        HashMap<Character,Integer> map=new HashMap<>();
        for(int i=0;i<=n-l;i++){
            StringBuilder sb=new StringBuilder();
            for(int j=i;j<i+l;j++){
                sb.append(s.charAt(j));
            }
            char arr[]=sb.toString().toCharArray();
            for(char key:arr){
                map.put(key,map.getOrDefault(key,0)+1);
            }
            for(char key:map.keySet()){
                if(map.get(key)>1){
                    is=false;
                }
            }
            if(is){
                count++;
            }
            sb.setLength(0);
            map.clear();
            is=true;
        }
        System.out.println("the count is: "+count);
    }
}


optimised:

import java.util.*;

class MissingNumberArray {
    public static void main(String[] args) {
        Scanner Sc = new Scanner(System.in);
        System.out.println("Enter the string: ");
        String s = Sc.nextLine();
        System.out.println("Enter the length of substrings (l): ");
        int l = Sc.nextInt();
        int n = s.length();
        int count = 0;

        if (l > n) {
            System.out.println("The count is: 0");
            return;
        }

        // Sliding window with character frequency map
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < l; i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }

        boolean isUnique = true;
        for (int freq : map.values()) {
            if (freq > 1) {
                isUnique = false;
                break;
            }
        }
        if (isUnique) {
            count++;
        }

        for (int i = l; i < n; i++) {
            // Slide the window: remove the first character of the previous window
            char charToRemove = s.charAt(i - l);
            map.put(charToRemove, map.get(charToRemove) - 1);
            if (map.get(charToRemove) == 0) {
                map.remove(charToRemove);
            }

            // Add the new character
            char charToAdd = s.charAt(i);
            map.put(charToAdd, map.getOrDefault(charToAdd, 0) + 1);

            // Check if the current window is unique
            isUnique = true;
            for (int freq : map.values()) {
                if (freq > 1) {
                    isUnique = false;
                    break;
                }
            }
            if (isUnique) {
                count++;
            }
        }

        System.out.println("The count is: " + count);
    }
}


